/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StickersNewRouteImport } from './routes/stickers-new'
import { Route as StickersRouteImport } from './routes/stickers'
import { Route as SkinsNewRouteImport } from './routes/skins-new'
import { Route as SkinsRouteImport } from './routes/skins'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const StickersNewRoute = StickersNewRouteImport.update({
  id: '/stickers-new',
  path: '/stickers-new',
  getParentRoute: () => rootRouteImport,
} as any)
const StickersRoute = StickersRouteImport.update({
  id: '/stickers',
  path: '/stickers',
  getParentRoute: () => rootRouteImport,
} as any)
const SkinsNewRoute = SkinsNewRouteImport.update({
  id: '/skins-new',
  path: '/skins-new',
  getParentRoute: () => rootRouteImport,
} as any)
const SkinsRoute = SkinsRouteImport.update({
  id: '/skins',
  path: '/skins',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings': typeof SettingsRoute
  '/skins': typeof SkinsRoute
  '/skins-new': typeof SkinsNewRoute
  '/stickers': typeof StickersRoute
  '/stickers-new': typeof StickersNewRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings': typeof SettingsRoute
  '/skins': typeof SkinsRoute
  '/skins-new': typeof SkinsNewRoute
  '/stickers': typeof StickersRoute
  '/stickers-new': typeof StickersNewRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/settings': typeof SettingsRoute
  '/skins': typeof SkinsRoute
  '/skins-new': typeof SkinsNewRoute
  '/stickers': typeof StickersRoute
  '/stickers-new': typeof StickersNewRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/settings'
    | '/skins'
    | '/skins-new'
    | '/stickers'
    | '/stickers-new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/settings'
    | '/skins'
    | '/skins-new'
    | '/stickers'
    | '/stickers-new'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/settings'
    | '/skins'
    | '/skins-new'
    | '/stickers'
    | '/stickers-new'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  SettingsRoute: typeof SettingsRoute
  SkinsRoute: typeof SkinsRoute
  SkinsNewRoute: typeof SkinsNewRoute
  StickersRoute: typeof StickersRoute
  StickersNewRoute: typeof StickersNewRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/stickers-new': {
      id: '/stickers-new'
      path: '/stickers-new'
      fullPath: '/stickers-new'
      preLoaderRoute: typeof StickersNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/stickers': {
      id: '/stickers'
      path: '/stickers'
      fullPath: '/stickers'
      preLoaderRoute: typeof StickersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/skins-new': {
      id: '/skins-new'
      path: '/skins-new'
      fullPath: '/skins-new'
      preLoaderRoute: typeof SkinsNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/skins': {
      id: '/skins'
      path: '/skins'
      fullPath: '/skins'
      preLoaderRoute: typeof SkinsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  SettingsRoute: SettingsRoute,
  SkinsRoute: SkinsRoute,
  SkinsNewRoute: SkinsNewRoute,
  StickersRoute: StickersRoute,
  StickersNewRoute: StickersNewRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
